/**
 * string-remove-widows
 * Helps to prevent widow words in a text
 * Version: 2.0.11
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://codsen.com/os/string-remove-widows/
 */

import{matchRightIncl as t}from"string-match-left-right";import{left as e,right as r}from"string-left-right";import{Ranges as o}from"ranges-push";import{rApply as s}from"ranges-apply";const i=[{heads:"{{",tails:"}}"},{heads:["{% if","{%- if"],tails:["{% endif","{%- endif"]},{heads:["{% for","{%- for"],tails:["{% endfor","{%- endfor"]},{heads:["{%","{%-"],tails:["%}","-%}"]},{heads:"{#",tails:"#}"}],n=[{heads:"{{",tails:"}}"}],a=[{heads:["<%","<%=","<%-"],tails:["%>","=%>","-%>"]}],g=["abbr","address","area","article","aside","audio","base","bdi","bdo","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","doctype","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","param","picture","pre","progress","rb","rp","rt","rtc","ruby","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","ul","var","video","wbr","xml"],u="2.0.11",c={removeWidowPreventionMeasures:!1,convertEntities:!0,targetLanguage:"html",UKPostcodes:!1,hyphens:!0,minWordCount:4,minCharCount:5,ignore:[],reportProgressFunc:null,reportProgressFuncFrom:0,reportProgressFuncTo:100,tagRanges:[]};function d(u,d){const l=Date.now();if("string"!=typeof u)throw void 0===u?new Error("string-remove-widows: [THROW_ID_01] the first input argument is completely missing! It should be given as string."):new Error(`string-remove-widows: [THROW_ID_02] the first input argument must be string! It was given as "${typeof u}", equal to:\n${JSON.stringify(u,null,4)}`);if(d&&"object"!=typeof d)throw new Error(`string-remove-widows: [THROW_ID_03] the second input argument, options object, should be a plain object but it was given as type ${typeof d}, equal to ${JSON.stringify(d,null,4)}`);const m=Array.isArray,h=u.length,p=new o({mergeType:2}),f=["."],v=/[A-Z]{1,2}[0-9][0-9A-Z]?$/,b=/^[0-9][A-Z]{2}/,w=.06;let y,W,F,L,P,C,A,E,j,T=0,k=0,M=0;const R={...c,...d},D={removeWidows:!1,convertEntities:!1};if(!R.ignore||!m(R.ignore)&&"string"!=typeof R.ignore)R.ignore=[];else if("string"==typeof R.ignore&&(R.ignore=[R.ignore]),R.ignore.includes("all"))R.ignore=R.ignore.concat(i.concat(a));else if(R.ignore.some((t=>"string"==typeof t))){let t=[];R.ignore=R.ignore.filter((e=>"string"==typeof e&&e.length?(["nunjucks","jinja","liquid"].includes(e.trim().toLowerCase())?t=t.concat(i):["hugo"].includes(e.trim().toLowerCase())?t=t.concat(n):["hexo"].includes(e.trim().toLowerCase())&&(t=t.concat(a)),!1):"object"==typeof e||void 0)),t.length&&(R.ignore=R.ignore.concat(t))}let I;function _(t,e){let r=" ";R.removeWidowPreventionMeasures?r=" ":R.convertEntities&&(r="&nbsp;","string"==typeof R.targetLanguage&&("css"===R.targetLanguage.trim().toLowerCase()?r="\\00A0":"js"===R.targetLanguage.trim().toLowerCase()&&(r="\\u00A0"))),u.slice(t,e)!==r&&p.push(t,e,r)}function O(){k=0,M=0,W=void 0,F=void 0,L=void 0,P=void 0,C=void 0,A=void 0}R.reportProgressFunc&&(I=Math.floor(R.reportProgressFuncTo-(R.reportProgressFuncTo-R.reportProgressFuncFrom)*w-R.reportProgressFuncFrom)),O();for(let o=0;o<=h;o++){if(!E&&m(R.ignore)&&R.ignore.length&&R.ignore.some(((t,e)=>{if(m(t.heads)&&t.heads.some((t=>u.startsWith(t,o)))||"string"==typeof t.heads&&u.startsWith(t.heads,o))return k+=1,E=R.ignore[e].tails,!0})),!E&&j&&j===o&&(k+=1,j=void 0),"function"==typeof R.reportProgressFunc&&(y=R.reportProgressFuncFrom+Math.floor(o/h*(I||1)),y!==T&&(T=y,R.reportProgressFunc(y))),!E&&o&&u[o]&&u[o].trim()&&(!u[o-1]||u[o-1]&&!u[o-1].trim())&&(P=o),!E&&u[o]&&u[o].trim()&&(M+=1),E||!R.hyphens||!("-—–".includes(u[o])||u.startsWith("&ndash;",o)||u.startsWith("\\2013",o)||u.startsWith("\\u2013",o)||u.startsWith("&mdash;",o)||u.startsWith("\\2014",o)||u.startsWith("\\u2014",o))||!u[o+1]||u[o+1].trim()&&"&"!==u[o]||u[o-1]&&!u[o-1].trim()&&u[e(u,o)]&&(_(e(u,o)+1,o),D.removeWidows=!0),E||!u.startsWith("&nbsp;",o)&&!u.startsWith("&#160;",o)||(C=o,A=o+6,u[o+6]&&u[o+6].trim()&&(j=o+6),R.convertEntities?"css"!==R.targetLanguage&&"js"!==R.targetLanguage||(p.push(o,o+6,"css"===R.targetLanguage?"\\00A0":"\\u00A0"),D.convertEntities=!0):(p.push(o,o+6," "),D.convertEntities=!0)),!E&&u[o+4]&&"\\"===u[o]&&"0"===u[o+1]&&"0"===u[o+2]&&"A"===u[o+3].toUpperCase()&&"0"===u[o+4]&&(C=o,A=o+5,u[o+5]&&u[o+5].trim()&&(j=o+5),R.convertEntities?"html"!==R.targetLanguage&&"js"!==R.targetLanguage||(p.push(o,o+5,"html"===R.targetLanguage?"&nbsp;":"\\u00A0"),D.convertEntities=!0):(p.push(o,o+5," "),D.convertEntities=!0)),!E&&"\\"===u[o]&&u[o+1]&&"u"===u[o+1].toLowerCase()&&"0"===u[o+2]&&"0"===u[o+3]&&u[o+4]&&"A"===u[o+4].toUpperCase()&&"0"===u[o+5]&&(C=o,A=o+6,u[o+6]&&u[o+6].trim()&&(j=o+6),R.convertEntities?"html"!==R.targetLanguage&&"css"!==R.targetLanguage||p.push(o,o+6,"html"===R.targetLanguage?"&nbsp;":"\\00A0"):p.push(o,o+6," ")),E||" "!==u[o]||(C=o,A=o+1,R.convertEntities&&p.push(o,o+1,"css"===R.targetLanguage?"\\00A0":"js"===R.targetLanguage?"\\u00A0":"&nbsp;")),E||!u[o]||!u[o].trim()||u[o-1]&&u[o-1].trim()||(k+=1),!E&&(!u[o]||"\r\n".includes(u[o])||("\n"===u[o]||"\r"===u[o]||"\r"===u[o]&&"\n"===u[o+1])&&e(u,o)&&f.includes(u[e(u,o)]))){if((!R.minWordCount||k>=R.minWordCount)&&(!R.minCharCount||M>=R.minCharCount)){let t,e;void 0!==L&&void 0!==P&&void 0!==C&&void 0!==A?L>C?(t=L,e=P):(t=C,e=A):void 0!==L&&void 0!==P?(t=L,e=P):void 0!==C&&void 0!==A&&(t=C,e=A),t&&e||!W||!F||(t=W,e=F),t&&e&&(_(t,e),D.removeWidows=!0)}O()}let s;R.UKPostcodes&&u[o]&&!u[o].trim()&&u[o-1]&&u[o-1].trim()&&v.test(u.slice(0,o))&&u[r(u,o)]&&b.test(u.slice(r(u,o)))&&(_(o,r(u,o)),D.removeWidows=!0),E||!u[o]||u[o].trim()||!u[o-1]||!u[o-1].trim()||!(void 0===L||u[L-1]&&u[L-1].trim())||"/>".includes(u[r(u,o)])||u.slice(0,o).trim().endsWith("br")||u.slice(0,o).trim().endsWith("hr")||u.slice(0,o).endsWith("<")&&g.some((t=>u.startsWith(t,r(u,o))))||(W=L,F=P,L=o,P=void 0,void 0===C&&void 0===A||(C=void 0,A=void 0)),E&&("string"!=typeof E||E.length&&!u.startsWith(E,o)?!m(E)||E.length&&!E.some((t=>{if(u.startsWith(t,o))return s=t,!0}))||(E=void 0,o+=s.length,m(R.ignore)&&R.ignore.length&&u[o+1]&&R.ignore.some((e=>t(u,o,e.tails,{trimBeforeMatching:!0,cb:(t,e,r)=>(r&&(o=r-1,u[o+1]&&u[o+1].trim()&&(k+=1)),!0)})))):E=void 0),u[o]&&"\r\n".includes(u[o])&&(k=0,M=0),m(R.tagRanges)&&R.tagRanges.length&&R.tagRanges.some((t=>{if(o>=t[0]&&o<=t[1]&&t[1]-1>o)return o=t[1]-1,!0}))}return s(u,p.current()).split("").forEach(((t,e)=>{})),{res:s(u,p.current(),R.reportProgressFunc?t=>{y=Math.floor(.94*(R.reportProgressFuncTo-R.reportProgressFuncFrom)+t/100*(R.reportProgressFuncTo-R.reportProgressFuncFrom)*w),y!==T&&(T=y,R.reportProgressFunc(y))}:void 0),ranges:p.current(),log:{timeTakenInMilliseconds:Date.now()-l},whatWasDone:D}}export{c as defaults,d as removeWidows,u as version};
