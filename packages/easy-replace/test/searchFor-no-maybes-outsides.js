import tap from "tap";
import { er } from "../dist/easy-replace.esm.js";

// ==============================
// no searchFor + no maybes + outsides
// ==============================

tap.test("01 - one rightOutside, not found", (t) => {
  t.equal(
    er(
      "aaaðŸ¦„a bbbbðŸ¦„ ccccðŸ¦„",
      {
        leftOutsideNot: "",
        leftOutside: "",
        leftMaybe: "",
        searchFor: "",
        rightMaybe: "",
        rightOutside: "ðŸ¦„",
        rightOutsideNot: "",
      },
      "ðŸŒŸ"
    ),
    "aaaðŸ¦„a bbbbðŸ¦„ ccccðŸ¦„",
    "test 7.1"
  );
  t.end();
});

tap.test("02 - one leftOutside, not found", (t) => {
  t.equal(
    er(
      "ðŸ¦„aaaa ðŸ¦„bbbb ðŸ¦„cccc",
      {
        leftOutsideNot: "",
        leftOutside: "ðŸ¦„",
        leftMaybe: "",
        searchFor: "",
        rightMaybe: "",
        rightOutside: "",
        rightOutsideNot: "",
      },
      "ðŸŒŸ"
    ),
    "ðŸ¦„aaaa ðŸ¦„bbbb ðŸ¦„cccc",
    "test 7.2"
  );
  t.end();
});

tap.test("03 - one leftOutside, not found + null replacement", (t) => {
  t.equal(
    er(
      "aaðŸ¦„aa bbðŸ¦„bb ccðŸ¦„cc",
      {
        leftOutsideNot: "",
        leftOutside: "ðŸ¦„",
        leftMaybe: "",
        searchFor: "",
        rightMaybe: "",
        rightOutside: "",
        rightOutsideNot: "",
      },
      null
    ),
    "aaðŸ¦„aa bbðŸ¦„bb ccðŸ¦„cc",
    "test 7.3"
  );
  t.end();
});

tap.test("04 - leftOutside and replacement are null", (t) => {
  t.equal(
    er(
      "aaaa bbbb cccc",
      {
        leftOutside: null,
      },
      null
    ),
    "aaaa bbbb cccc",
    "test 7.4"
  );
  t.end();
});

tap.test("05 - left outside and replacement are undefined", (t) => {
  t.equal(
    er(
      "aaaa bbbb cccc",
      {
        leftOutside: undefined,
      },
      undefined
    ),
    "aaaa bbbb cccc",
    "test 7.5"
  );
  t.end();
});
