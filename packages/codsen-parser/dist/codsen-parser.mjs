/**
 * codsen-parser
 * Parser aiming at broken or mixed code, especially HTML & CSS
 * Version: 0.10.7
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://codsen.com/os/codsen-parser/
 */

import{pathNext as e,pathUp as t,pathPrev as n}from"ast-monkey-util";import{findMalformed as r}from"string-find-malformed";import{left as o,right as i}from"string-left-right";import{tokenizer as l}from"codsen-tokenizer";import s from"object-path";const a="0.10.7",c={reportProgressFunc:null,reportProgressFuncFrom:0,reportProgressFuncTo:100,tagCb:null,charCb:null,errCb:null};function u(e){return e&&"object"==typeof e&&!Array.isArray(e)}function g(e,t){return t.closing&&e.length&&(e[e.length-1].type===t.type&&Object.prototype.hasOwnProperty.call(e[e.length-1],"tagName")&&Object.prototype.hasOwnProperty.call(t,"tagName")&&e[e.length-1].tagName===t.tagName&&!1===e[e.length-1].closing||"comment"===t.type&&e.some((e=>Object.prototype.hasOwnProperty.call(e,"closing")&&!e.closing)))}function p(a,p){if("string"!=typeof a)throw void 0===a?new Error("codsen-tokenizer: [THROW_ID_01] the first input argument is completely missing! It should be given as string."):new Error(`codsen-tokenizer: [THROW_ID_02] the first input argument must be string! It was given as "${typeof a}", equal to:\n${JSON.stringify(a,null,4)}`);if(p&&!u(p))throw new Error(`codsen-tokenizer: [THROW_ID_03] the second input argument, an options object, should be a plain object but it was given as type ${typeof p}, equal to ${JSON.stringify(p,null,4)}`);if(p&&u(p)&&p.tagCb&&"function"!=typeof p.tagCb)throw new Error(`codsen-tokenizer: [THROW_ID_04] the opts.tagCb, callback function, should be a function but it was given as type ${typeof p.tagCb}, equal to ${JSON.stringify(p.tagCb,null,4)}`);if(p&&u(p)&&p.charCb&&"function"!=typeof p.charCb)throw new Error(`codsen-tokenizer: [THROW_ID_05] the opts.charCb, callback function, should be a function but it was given as type ${typeof p.charCb}, equal to ${JSON.stringify(p.charCb,null,4)}`);if(p&&u(p)&&p.reportProgressFunc&&"function"!=typeof p.reportProgressFunc)throw new Error(`codsen-tokenizer: [THROW_ID_06] the opts.reportProgressFunc, callback function, should be a function but it was given as type ${typeof p.reportProgressFunc}, equal to ${JSON.stringify(p.reportProgressFunc,null,4)}`);if(p&&u(p)&&p.errCb&&"function"!=typeof p.errCb)throw new Error(`codsen-tokenizer: [THROW_ID_07] the opts.errCb, callback function, should be a function but it was given as type ${typeof p.errCb}, equal to ${JSON.stringify(p.errCb,null,4)}`);const d={...c,...p},m=[],h=[];let y="",f=!1,b={};const v=["tag","comment"],x=["doctype"];return l(a,{reportProgressFunc:d.reportProgressFunc,reportProgressFuncFrom:d.reportProgressFuncFrom,reportProgressFuncTo:d.reportProgressFuncTo,tagCbLookahead:2,tagCb:(l,a)=>{if("function"==typeof d.tagCb&&d.tagCb(l),!l.nested){let a=s.get(h,y);if(u(a)||(a=null),!f||l.closing||b.closing&&("comment"!==b.type||"html"!==b.language)||"text"===b.type||a&&a.tagName===l.tagName&&!a.closing&&l.closing||g(m,l))if(l.closing&&"string"==typeof y&&y.includes(".")&&(!l.tagName||b.tagName!==l.tagName||b.closing)){if("comment"===l.type&&l.closing&&Array.isArray(m)&&m.length&&m.some((e=>"comment"===e.type&&e.kind===l.kind)))for(let n=m.length;n--&&(y=e(t(y)),"comment"!==m[n].type||m[n].kind!==l.kind););else y=e(t(y));if(g(m,l)){for(;m.length&&m[m.length-1].type!==l.type&&m[m.length-1].kind!==l.kind;)m.pop();m.pop(),f=!1}else if(m.length&&l.tagName&&m.some((e=>"tag"===e.type&&e.tagName===l.tagName))){let n=m.pop(),r=n.tagName;for(;r!==l.tagName;)n&&"function"==typeof d.errCb&&d.errCb({ruleId:`${n.type}${"comment"===n.type?`-${n.kind}`:""}-missing-closing`,idxFrom:n.start,idxTo:n.end,tokenObj:n}),n=m.pop(),r=n.tagName,y=e(t(y))}else if(m.length>1&&m[m.length-2].type===l.type&&m[m.length-2].type===l.type&&m[m.length-2].tagName===l.tagName){if("function"==typeof d.errCb){const e=m[m.length-1];d.errCb({ruleId:"tag-rogue",idxFrom:e.start,idxTo:e.end,tokenObj:e})}m.pop(),m.pop()}}else y?(y=e(y),g(m,l)&&m.pop()):y="0";else f=!1,y=`${y}.children.0`;v.includes(l.type)&&!l.void&&Object.prototype.hasOwnProperty.call(l,"closing")&&!l.closing&&(f=!0,l.kind&&x.includes(l.kind)||m.push({...l}));const c=n(y)||"",p=t(y);let k,C;p&&y.includes(".")&&(k=s.get(h,p)),c&&(C=s.get(h,c));const F=/(-+|-+[^>])>/;let $,O;u(C)&&Array.isArray(C.children)&&C.children.length&&C.children[C.children.length-1]&&($=C.children[C.children.length-1],O=`${c}.children.${s.get(h,c).children.length-1}`);let N=!1;if("text"===l.type&&u(k)&&"comment"===k.type&&"simple"===k.kind&&!k.closing&&F.test(l.value)){const n=(F.exec(l.value)||{}).index,r=(n||0)+l.value.slice(n).indexOf(">")+1;n&&n>0&&(s.set(h,y,{...l,end:l.start+n,value:l.value.slice(0,n)}),v.includes(l.type)&&(l.children=[])),y=e(t(y)),s.set(h,y,{type:"comment",kind:"simple",closing:!0,start:l.start+(n||0),end:l.start+r,value:l.value.slice(n,r),children:[]}),r<l.value.length&&(y=e(y),s.set(h,y,{type:"text",start:l.start+r,end:l.end,value:l.value.slice(r)})),N=!0}else if("comment"===l.type&&"only"===l.kind&&u(C))if("text"===C.type&&C.value.trim()&&"<!-".includes(C.value[o(C.value,C.value.length)])){const e=[];if(r(C.value,"\x3c!--",(t=>{e.push(t)}),{maxDistance:2}),e.length&&!i(C.value,e[e.length-1].idxTo-1)){const t=e.pop();!o(C.value,t.idxFrom)&&c&&u(C)?(v.includes(l.type)&&(l.children=[]),y=c,s.set(h,y,{...l,start:t.idxFrom+C.start,kind:"not",value:`${C.value}${l.value}`}),N=!0):c&&u(C)&&(s.set(h,c,{...C,end:t.idxFrom+C.start,value:C.value.slice(0,t.idxFrom)}),v.includes(l.type)&&(l.children=[]),s.set(h,y,{...l,start:t.idxFrom+C.start,kind:"not",value:`${C.value.slice(t.idxFrom)}${l.value}`}),N=!0)}}else if(u($)&&"text"===$.type&&$.value.trim()&&"<!-".includes($.value[o($.value,$.value.length)])){const e=[];if(r($.value,"\x3c!--",(t=>{e.push(t)}),{maxDistance:2}),e.length&&!i($.value,e[e.length-1].idxTo-1)){const t=e.pop();!o($.value,t.idxFrom)&&c&&u($)?(v.includes(l.type)&&(l.children=[]),s.set(h,y,{...l,start:t.idxFrom+$.start,kind:"not",value:`${$.value}${l.value}`}),s.del(h,`${c}.children.${s.get(h,c).children.length-1}`),N=!0):c&&u($)&&O&&(s.set(h,O,{...$,end:t.idxFrom+$.start,value:$.value.slice(0,t.idxFrom)}),v.includes(l.type)&&(l.children=[]),s.set(h,y,{...l,start:t.idxFrom+$.start,kind:"not",value:`${$.value.slice(t.idxFrom)}${l.value}`}),N=!0)}}N||(v.includes(l.type)&&(l.children=[]),s.set(h,y,l)),!v.includes(l.type)||!l.closing||c&&u(C)&&!C.closing&&C.type===l.type&&C.tagName===l.tagName||(l.void?"function"==typeof d.errCb&&d.errCb({ruleId:"tag-void-frontal-slash",idxFrom:l.start,idxTo:l.end,fix:{ranges:[[l.start+1,l.tagNameStartsAt]]},tokenObj:l}):"function"==typeof d.errCb&&d.errCb({ruleId:`${l.type}${"comment"===l.type?`-${l.kind}`:""}-missing-opening`,idxFrom:l.start,idxTo:l.end,tokenObj:l})),b={...l}}},charCb:d.charCb}),m.length&&m.forEach((e=>{"function"==typeof d.errCb&&d.errCb({ruleId:`${e.type}${"comment"===e.type?`-${e.kind}`:""}-missing-closing`,idxFrom:e.start,idxTo:e.end,tokenObj:e})})),h}export{p as cparser,c as defaults,a as version};
