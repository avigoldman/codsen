{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; isOpening &#x7D; from \"is-html-tag-opening\";\n\nconst text = `<span>a < b<span>`;\n\n// opening span tag's opening\nassert.equal(isOpening(text, 0), true);\n\n// unencoded bracket between a and b\nassert.equal(isOpening(text, 8), false);\n\n// closing span tag's opening\nassert.equal(isOpening(text, 11), true);"},"opts.allowCustomTagNames.js":{"title":"`opts.allowCustomTagNames`","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; isOpening &#x7D; from \"is-html-tag-opening\";\n\n// recognised tag\nassert.equal(isOpening(`abc <div>`, 4), true);\n//                          ^\n\n// unrecognised tag\nassert.equal(isOpening(`abc <zzz>`, 4), false);\n//                          ^\n\n// but with opts.allowCustomTagNames result is \"true\"\nassert.equal(\n  isOpening(`abc <zzz>`, 4, &#x7B;\n    allowCustomTagNames: true,\n  &#x7D;),\n  true\n);"},"opts.skipOpeningBracket.js":{"title":"`opts.skipOpeningBracket`","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; isOpening &#x7D; from \"is-html-tag-opening\";\n\n// missing opening bracket:\nassert.equal(isOpening(`<a>div class=\"w-64 h-3\">`, 3), false);\n//                         ^\n// result is instant \"false\" because `idx` has to be\n// on an opening bracket (besides checking for tag name\n// being present and recognised and attributes being present)\n\n// but with opts.skipOpeningBracket we remove the requirement\n// that \"idx\" has to be on a bracket - algorithm detects valid\n// tag name and the attribute that follows and recognise it's a\n// tag starting:\nassert.equal(\n  isOpening(`<a>div class=\"w-64 h-3\">`, 3, &#x7B;\n    skipOpeningBracket: true,\n  &#x7D;),\n  true\n);"}}