/**
 * ranges-invert
 * Invert string index ranges
 * Version: 4.0.8
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://codsen.com/os/ranges-invert/
 */

!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((r="undefined"!=typeof globalThis?globalThis:r||self).rangesInvert={})}(this,(function(r){"use strict";function e(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function n(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function t(r){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(n){e(r,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(s,e))}))}return r}var s={strictlyTwoElementsInRangeArrays:!1,progressFn:null};function o(r,e){if(!Array.isArray(r)||!r.length)return r;var n,o,i=t(t({},s),e);if(i.strictlyTwoElementsInRangeArrays&&!r.filter((function(r){return r})).every((function(r,e){return 2===r.length||(n=e,o=r.length,!1)})))throw new TypeError("ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, "+n+"th range ("+JSON.stringify(r[n],null,4)+") has not two but "+o+" elements!");if(!r.filter((function(r){return r})).every((function(r,e){return!(!Number.isInteger(r[0])||r[0]<0||!Number.isInteger(r[1])||r[1]<0)||(n=e,!1)})))throw new TypeError("ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, "+n+"th range ("+JSON.stringify(r[n],null,4)+") does not consist of only natural numbers!");var a=Math.pow(r.filter((function(r){return r})).length,2),u=0;return Array.from(r).filter((function(r){return r})).sort((function(r,e){return i.progressFn&&i.progressFn(Math.floor(100*(u+=1)/a)),r[0]===e[0]?r[1]<e[1]?-1:r[1]>e[1]?1:0:r[0]<e[0]?-1:1}))}var i={mergeType:1,progressFn:null,joinRangesThatTouchEdges:!0};function a(r,e){function n(r){return r&&"object"==typeof r&&!Array.isArray(r)}if(!Array.isArray(r)||!r.length)return null;var s;if(e){if(!n(e))throw new Error("emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:\n"+JSON.stringify(e,null,4)+" (type "+typeof e+")");if((s=t(t({},i),e)).progressFn&&n(s.progressFn)&&!Object.keys(s.progressFn).length)s.progressFn=null;else if(s.progressFn&&"function"!=typeof s.progressFn)throw new Error('ranges-merge: [THROW_ID_01] opts.progressFn must be a function! It was given of a type: "'+typeof s.progressFn+'", equal to '+JSON.stringify(s.progressFn,null,4));if(s.mergeType&&1!=+s.mergeType&&2!=+s.mergeType)throw new Error('ranges-merge: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "'+typeof s.mergeType+'", equal to '+JSON.stringify(s.mergeType,null,4));if("boolean"!=typeof s.joinRangesThatTouchEdges)throw new Error('ranges-merge: [THROW_ID_04] opts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: "'+typeof s.joinRangesThatTouchEdges+'", equal to '+JSON.stringify(s.joinRangesThatTouchEdges,null,4))}else s=t({},i);var a,u,l,g=r.filter((function(r){return r})).map((function(r){return[].concat(r)})).filter((function(r){return void 0!==r[2]||r[0]!==r[1]}));if(!(a=s.progressFn?o(g,{progressFn:function(r){(l=Math.floor(r/5))!==u&&(u=l,s.progressFn(l))}}):o(g)))return null;for(var f=a.length-1,y=f;y>0;y--)s.progressFn&&(l=Math.floor(78*(1-y/f))+21)!==u&&l>u&&(u=l,s.progressFn(l)),(a[y][0]<=a[y-1][0]||!s.joinRangesThatTouchEdges&&a[y][0]<a[y-1][1]||s.joinRangesThatTouchEdges&&a[y][0]<=a[y-1][1])&&(a[y-1][0]=Math.min(a[y][0],a[y-1][0]),a[y-1][1]=Math.max(a[y][1],a[y-1][1]),void 0!==a[y][2]&&(a[y-1][0]>=a[y][0]||a[y-1][1]<=a[y][1])&&null!==a[y-1][2]&&(null===a[y][2]&&null!==a[y-1][2]?a[y-1][2]=null:null!=a[y-1][2]?2==+s.mergeType&&a[y-1][0]===a[y][0]?a[y-1][2]=a[y][2]:a[y-1][2]+=a[y][2]:a[y-1][2]=a[y][2]),a.splice(y,1),y=a.length);return a.length?a:null}r.rInvert=function(r,e,n){if(!Array.isArray(r)&&null!==r)throw new TypeError("ranges-invert: [THROW_ID_01] Input's first argument must be an array, consisting of range arrays! Currently its type is: "+typeof r+", equal to: "+JSON.stringify(r,null,4));if(!Number.isInteger(e)||e<0)throw new TypeError("ranges-invert: [THROW_ID_02] Input's second argument must be a natural number or zero (coming from String.length)! Currently its type is: "+typeof e+", equal to: "+JSON.stringify(e,null,4));if(Array.isArray(r)&&"number"==typeof r[0]&&"number"==typeof r[1])throw new TypeError("ranges-invert: [THROW_ID_07] The first argument should be AN ARRAY OF RANGES, not a single range! Currently arrOfRanges = "+JSON.stringify(r,null,0)+"!");if(!Array.isArray(r)||!r.filter((function(r){return Array.isArray(r)&&r[0]!==r[1]})).length||!e)return e?[[0,e]]:null;var s,o=t(t({},{strictlyTwoElementsInRangeArrays:!1,skipChecks:!1}),n),i=0;if(!o.skipChecks&&o.strictlyTwoElementsInRangeArrays&&!r.filter((function(r){return r})).every((function(r,e){return 2===r.length||(i=e,s=r.length,!1)})))throw new TypeError("ranges-invert: [THROW_ID_04] Because opts.strictlyTwoElementsInRangeArrays was enabled, all ranges must be strictly two-element-long. However, the "+i+"th range ("+JSON.stringify(r[i],null,0)+") has not two but "+s+" elements!");if(!o.skipChecks&&!r.every((function(r,e){return!(!Number.isInteger(r[0])||r[0]<0||!Number.isInteger(r[1])||r[1]<0)||(i=e,!1)})))throw new TypeError("ranges-invert: [THROW_ID_05] The first argument should be AN ARRAY OF ARRAYS! Each sub-array means string slice indexes. In our case, here "+(i+1)+"th range ("+JSON.stringify(r[i],null,0)+") does not consist of only natural numbers!");return function(r,e){if(null===r)return null;if(!Array.isArray(r))throw new TypeError("ranges-crop: [THROW_ID_01] The first input's argument must be an array, consisting of range arrays! Currently its type is: "+typeof r+", equal to: "+JSON.stringify(r,null,4));if(!Number.isInteger(e))throw new TypeError("ranges-crop: [THROW_ID_02] The second input's argument must be a natural number or zero (coming from String.length)! Currently its type is: "+typeof e+", equal to: "+JSON.stringify(e,null,4));if(!r.filter((function(r){return r})).length)return r.filter((function(r){return r}));var n=0;if(!r.filter((function(r){return r})).every((function(r,e){return!(!Number.isInteger(r[0])||!Number.isInteger(r[1]))||(n=e,!1)}))){if(Array.isArray(r)&&"number"==typeof r[0]&&"number"==typeof r[1])throw new TypeError("ranges-crop: [THROW_ID_03] The first argument should be AN ARRAY OF RANGES, not a single range! Currently arrOfRanges = "+JSON.stringify(r,null,0)+"!");throw new TypeError("ranges-crop: [THROW_ID_04] The first argument should be AN ARRAY OF ARRAYS! Each sub-array means string slice indexes. In our case, here "+n+"th range ("+JSON.stringify(r[n],null,0)+") does not consist of only natural numbers!")}if(!r.filter((function(r){return r})).every((function(r,e){return null==r[2]||"string"==typeof r[2]||(n=e,!1)})))throw new TypeError("ranges-crop: [THROW_ID_05] The third argument, if present at all, should be of a string-type or null. Currently the "+n+"th range "+JSON.stringify(r[n],null,0)+" has a argument in the range of a type "+typeof r[n][2]);var t=(a(r)||[]).filter((function(r){return r[0]<=e&&(null!=r[2]||r[0]<e)})).map((function(r){return r[1]>e?null!=r[2]?[r[0],e,r[2]]:[r[0],e]:r}));return t===[]?null:t}((o.skipChecks?r.filter((function(r){return r[0]!==r[1]})):a(r.filter((function(r){return r[0]!==r[1]})))).reduce((function(r,n,t,s){var i=[];0===t&&0!==s[0][0]&&i.push([0,s[0][0]]);var a=t<s.length-1?s[t+1][0]:e;if(n[1]!==a){if(o.skipChecks&&n[1]>a)throw new TypeError("ranges-invert: [THROW_ID_08] The checking (opts.skipChecks) is off and input ranges were not sorted! We nearly wrote range ["+n[1]+", "+a+"] which is backwards. For investigation, whole ranges array is:\n"+JSON.stringify(s,null,0));i.push([n[1],a])}return r.concat(i)}),[]),e)},r.version="4.0.8",Object.defineProperty(r,"__esModule",{value:!0})}));
